name: Test and Deploy Docker Container

on:
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Use Node.js 22
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'

    - name: Install dependencies
      run: npm i

    - name: Run tests
      run: npm run test

    - name: Run linter
      run: npm run lint

    - name: Build TypeScript
      run: npm run build

  build:
    name: Build Docker Container
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Extract version and name and set it to TAG env and NAME env var
        run: |
          echo "TAG=$(jq -r '.version' package.json)" >> $GITHUB_ENV && \
          echo "NAME=$(jq -r '.name' package.json)" >> $GITHUB_ENV


      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.CONTAINER_REGISTRY_URL }}
          username: ${{ secrets.CONTAINER_REGISTRY_USERNAME }}
          password: ${{ secrets.CONTAINER_REGISTRY_PASSWORD }}

      - name: Build Container
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: |
            ${{ vars.CONTAINER_REGISTRY_URL }}/codigo/${{ env.NAME }}:${{ env.TAG }}
            ${{ vars.CONTAINER_REGISTRY_URL }}/codigo/${{ env.NAME }}:latest
          build-args: |
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            DOCKER_GROUP_ID=${{ vars.DOCKER_GROUP_ID }}

  launch-update:
    name: Trigger Container Update
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Generate Payload
        uses: morzzz007/github-actions-jwt-generator@1.0.1
        id: jwtGenerator
        with:
          secret: ${{ secrets.JWT_SECRET }}
          payload: '{"appName":"${{ env.NAME }}"}'

      - name: Trigger Update
        uses: fjogeleit/http-request-action@v1
        with:
          url: ${{ vars.CONTAINER_UPDATER_URL }}/update
          method: POST
          customHeaders: '{ "Authorization": "Bearer ${{ steps.jwtGenerator.outputs.token }}", "Content-Type": "application/json"}'
          data: '{"appName": "${{ env.NAME }}"}'
